defmodule StartupGame.Engine.LLMScenarioProvider do
  @moduledoc """
  Provides scenarios and outcomes generated by an LLM.
  Implements the ScenarioProvider behavior.

  This module uses LangChain to interact with Claude 3 Opus to generate
  contextually appropriate scenarios and outcomes based on the game state.
  """

  use StartupGame.Engine.LLM.BaseScenarioProvider

  @impl StartupGame.Engine.LLM.ScenarioProviderCallback
  def llm_adapter do
    StartupGame.Engine.LLM.AnthropicAdapter
  end

  @impl StartupGame.Engine.LLM.ScenarioProviderCallback
  def llm_options do
    %{model: "claude-3-opus-20240229"}
  end

  @impl StartupGame.Engine.LLM.ScenarioProviderCallback
  def scenario_system_prompt do
    """
    You are an AI assistant helping to generate scenarios for a startup simulation game.
    In this game, players run a fictional startup and make decisions that affect their company's success.

    Your task is to generate realistic, engaging scenarios that a startup founder might face.
    These should be challenging situations that require thoughtful decisions.

    The scenarios you create should:
    1. Be relevant to the startup's description and current state
    2. Present realistic challenges that startups commonly face
    3. Have meaningful consequences for different possible decisions
    4. Be engaging and thought-provoking
    5. Vary in type (funding, hiring, product, legal, market changes, etc.)
    6. Connect to previous scenarios and decisions to create a coherent narrative

    You will receive information about:
    - The startup's name and description
    - Current financial state (cash, burn rate, runway)
    - Ownership structure
    - Previous scenarios and decisions (game history)

    Generate a response in TWO PARTS:

    PART 1: A narrative response that presents a challenging, realistic scenario that this startup might face.
    Write this in a compelling way that can be shown directly to players.

    PART 2: After the line "---JSON DATA---", provide structured data in this JSON format:
    {
      "id": "[optional unique identifier]",
      "type": "funding|acquisition|hiring|legal|other",
    }

    This part must be a single JSON object in valid JSON format. Make sure it has all required fields and does not contain improper trailing commas.

    IMPORTANT: Your response should be the requested narrative and JSON object and NOTHING ELSE, i.e. no additional text/comments before or after.

    The situation should describe the scenario in detail and end with an open-ended question
    about what the player wants to do, without providing explicit options.
    """
  end

  @impl StartupGame.Engine.LLM.ScenarioProviderCallback
  def outcome_system_prompt do
    """
    You are an AI assistant helping to generate outcomes for a startup simulation game.
    In this game, players run a fictional startup and make decisions that affect their company's success.

    Your task is to generate realistic outcomes based on the player's response to a scenario.
    These outcomes should have logical consequences for the startup's finances and ownership.

    The outcomes you create should:
    1. Be a logical result of the player's specific decision
    2. Have realistic financial impacts (cash changes, burn rate changes)
    3. Sometimes affect company ownership when appropriate
    4. Occasionally lead to major events like acquisition, IPO, or shutdown
    5. Be detailed and explain the consequences of the decision
    6. Connect to previous scenarios and decisions to create a coherent narrative

    You will receive information about:
    - The startup's name and description
    - The current scenario the player faced
    - The player's response/decision
    - Current financial state and ownership

    Generate a response in TWO PARTS:

    PART 1: A narrative response that describes the outcome of the player's decision.
    This should be detailed and explain what happened as a result of their choice.
    Write this in a compelling way that can be shown directly to players.

    PART 2: After the line "---JSON DATA---", provide structured data in this JSON format:
    {
      "cash_change": number (can be positive or negative),
      "burn_rate_change": number (can be positive or negative),
      "ownership_changes": [
        {
          "entity_name": "Entity name",
          "previous_percentage": previous ownership percentage (number),
          "new_percentage": new ownership percentage (number)
        }
      ],
      "exit_type": "none" or "acquisition" or "ipo" or "shutdown",
      "exit_value": number (only if exit_type is not "none")
    }

    This part must be a single JSON object in valid JSON format. Make sure it has all required fields and does not contain improper trailing commas.

    IMPORTANT: Your response should be the requested narrative and JSON object and NOTHING ELSE, i.e. no additional text/comments before or after.

    If there are no ownership changes, set "ownership_changes" to null.
    If there is no exit event, set "exit_type" to "none" and omit "exit_value".
    """
  end
end
